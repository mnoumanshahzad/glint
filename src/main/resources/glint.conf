# This is the reference config file that contains all the default settings.
glint {

  # Master configuration section
  master {

    # The master host name
    host = "127.0.0.1"

    # The master port
    port = 13370

    # The master actor name
    name = "master"

    # The master actor system name
    system = "glint-master"

    # The timeout during startup of the master
    startup-timeout = 30 seconds

    # Use our default akka configuration for the master
    akka_2_4_12_shade = ${glint.default.akka_2_4_12_shade}

    # We wish to change some of the default akka remoting configuration for the master node
    # Here we make sure lifecycle events are logged and make sure that netty tcp uses the appropriate hostname and port
    akka_2_4_12_shade.remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = ${glint.master.host}
        port = ${glint.master.port}
      }
    }
  }

  # Server configuration section
  server {

    # The server actor system name
    system = "glint-server"

    # The server name
    name = "server"

    # Timeout when a parameter server registers with the master
    registration-timeout = 10 seconds

    # Use the default akka configuration for the server
    akka_2_4_12_shade = ${glint.default.akka_2_4_12_shade}

    # The parameter server port is set to 0 to automatically choose an available one during runtime
    # This makes it possible to run multiple parameter servers on the same machine without conflicting ports
    akka_2_4_12_shade.remote.netty.tcp.port = 0
  }

  # Client configuration section
  client {

    # The client hostname, set to empty string to automatically detect
    host = ""

    # The client port is set to 0 to automatically choose an available one during runtime
    # This means we can run multiple clients on the same machine without conflicting ports
    port = 0

    # The client actor system name
    system = "glint-client"

    # The client timeout for registration and constructing BigMatrix and BigVector objects
    timeout = 30 seconds

    # Use the default akka configuration for the client
    akka_2_4_12_shade = ${glint.default.akka_2_4_12_shade}

    # Set the client's akka remoting hostname and port accordingly
    akka_2_4_12_shade.remote.netty.tcp {
      hostname = ${glint.client.host}
      port = ${glint.client.port}
    }
  }

  # Configuration for pull requests
  pull {

    # Number of pull attempts before giving up and failing the request
    maximum-attempts = 10

    # Initial timeout of the pull request
    initial-timeout = 5 seconds

    # Maximum timeout
    maximum-timeout = 5 minutes

    # Exponential backoff multiplier, the timeout gets multiplied by this value every failed attempt
    backoff-multiplier = 1.6

  }

  # Configuration for push requests
  push {

    # Number of push attempts before giving up and failing the request
    maximum-attempts = 10

    # Number of logic communication attempts before giving up and failing the request
    maximum-logic-attempts = 100

    # Initial timeout of the push request
    initial-timeout = 5 seconds

    # Maximum timeout
    maximum-timeout = 5 minutes

    # Exponential backoff multiplier, the timeout gets multiplied by this value every failed attempt
    backoff-multiplier = 1.6

  }

  # Default configuration setting
  default {

    # Default akka settings
    akka_2_4_12_shade {

      version = "2.4.12"

      # Akka event log handler
      event-handlers = ["akka_2_4_12_shade.event.slf4j.Slf4jEventHandler"]

      # Akka log level
      loglevel = "ERROR"

      #From akka's original reference.conf
      home = ""
      loggers = ["akka_2_4_12_shade.event.Logging$DefaultLogger"]
      logging-filter = "akka_2_4_12_shade.event.DefaultLoggingFilter"
      loggers-dispatcher = "akka_2_4_12_shade.actor.default-dispatcher"
      logger-startup-timeout = 5s
      stdout-loglevel = "WARNING"
      log-config-on-start = off
      log-dead-letters = 10
      log-dead-letters-during-shutdown = on
      library-extensions = ${?akka_2_4_12_shade.library-extensions} []
      extensions = []
      daemonic = off
      jvm-exit-on-fatal-error = on

      # Akka remoting configuration
      remote {

        # Remote lifecycle events logging has been turned off to prevent akka from cluttering the logs with unnecessary
        # info
        log-remote-lifecycle-events = off

        # Use netty tcp transport
        enable-transports = ["akka_2_4_12_shade.remote.netty.tcp"]

        # Set netty maximum frame size
        netty.tcp {
          maximum-frame-size = 1280000b
        }
      }

      # Akka actor configuration
      actor {

        # Enable remoting
        provider = "akka_2_4_12_shade.remote.RemoteActorRefProvider"


        guardian-supervisor-strategy = "akka_2_4_12_shade.actor.DefaultSupervisorStrategy"
        creation-timeout = 20s
        serialize-messages = off
        serialize-creators = off
        unstarted-push-timeout = 10s
        typed {
          timeout = 5s
        }
        router.type-mapping {
          from-code = "akka_2_4_12_shade.routing.NoRouter"
          round-robin-pool = "akka_2_4_12_shade.routing.RoundRobinPool"
          round-robin-group = "akka_2_4_12_shade.routing.RoundRobinGroup"
          random-pool = "akka_2_4_12_shade.routing.RandomPool"
          random-group = "akka_2_4_12_shade.routing.RandomGroup"
          balancing-pool = "akka_2_4_12_shade.routing.BalancingPool"
          smallest-mailbox-pool = "akka_2_4_12_shade.routing.SmallestMailboxPool"
          broadcast-pool = "akka_2_4_12_shade.routing.BroadcastPool"
          broadcast-group = "akka_2_4_12_shade.routing.BroadcastGroup"
          scatter-gather-pool = "akka_2_4_12_shade.routing.ScatterGatherFirstCompletedPool"
          scatter-gather-group = "akka_2_4_12_shade.routing.ScatterGatherFirstCompletedGroup"
          tail-chopping-pool = "akka_2_4_12_shade.routing.TailChoppingPool"
          tail-chopping-group = "akka_2_4_12_shade.routing.TailChoppingGroup"
          consistent-hashing-pool = "akka_2_4_12_shade.routing.ConsistentHashingPool"
          consistent-hashing-group = "akka_2_4_12_shade.routing.ConsistentHashingGroup"
        }
        deployment {
          default {
            dispatcher = ""
            mailbox = ""
            router = "from-code"
            nr-of-instances = 1
            within = 5 seconds
            virtual-nodes-factor = 10
            tail-chopping-router {
              interval = 10 milliseconds
            }
            routees {
              paths = []
            }
            resizer {
              enabled = off
              lower-bound = 1
              upper-bound = 10
              pressure-threshold = 1
              rampup-rate = 0.2
              backoff-threshold = 0.3
              backoff-rate = 0.1
              messages-per-resize = 10
            }
            optimal-size-exploring-resizer {
              enabled = off
              lower-bound = 1
              upper-bound = 10
              chance-of-ramping-down-when-full = 0.2
              action-interval = 5s
              downsize-after-underutilized-for = 72h
              explore-step-size = 0.1
              chance-of-exploration = 0.4
              downsize-ratio = 0.8
              optimization-range = 16
              weight-of-latest-metric = 0.5
            }
          }
          /IO-DNS/inet-address {
            mailbox = "unbounded"
            router = "consistent-hashing-pool"
            nr-of-instances = 4
          }
        }
        default-dispatcher {
          type = "Dispatcher"
          executor = "default-executor"
          default-executor {
            fallback = "fork-join-executor"
          }
          fork-join-executor {
            parallelism-min = 8
            parallelism-factor = 3.0
            parallelism-max = 64
            task-peeking-mode = "FIFO"
          }
          thread-pool-executor {
            keep-alive-time = 60s
            fixed-pool-size = off
            core-pool-size-min = 8
            core-pool-size-factor = 3.0
            core-pool-size-max = 64
            max-pool-size-min = 8
            max-pool-size-factor  = 3.0
            max-pool-size-max = 64
            task-queue-size = -1
            task-queue-type = "linked"
            allow-core-timeout = on
          }
          shutdown-timeout = 1s
          throughput = 5
          throughput-deadline-time = 0ms
          attempt-teamwork = on
          mailbox-requirement = ""
        }
        default-mailbox {
          mailbox-type = "akka_2_4_12_shade.dispatch.UnboundedMailbox"
          mailbox-capacity = 1000
          mailbox-push-timeout-time = 10s
          stash-capacity = -1
        }
        mailbox {
          requirements {
            "akka_2_4_12_shade.dispatch.UnboundedMessageQueueSemantics" =
              akka_2_4_12_shade.actor.mailbox.unbounded-queue-based
            "akka_2_4_12_shade.dispatch.BoundedMessageQueueSemantics" =
              akka_2_4_12_shade.actor.mailbox.bounded-queue-based
            "akka_2_4_12_shade.dispatch.DequeBasedMessageQueueSemantics" =
              akka_2_4_12_shade.actor.mailbox.unbounded-deque-based
            "akka_2_4_12_shade.dispatch.UnboundedDequeBasedMessageQueueSemantics" =
              akka_2_4_12_shade.actor.mailbox.unbounded-deque-based
            "akka_2_4_12_shade.dispatch.BoundedDequeBasedMessageQueueSemantics" =
              akka_2_4_12_shade.actor.mailbox.bounded-deque-based
            "akka_2_4_12_shade.dispatch.MultipleConsumerSemantics" =
              akka_2_4_12_shade.actor.mailbox.unbounded-queue-based
            "akka_2_4_12_shade.dispatch.ControlAwareMessageQueueSemantics" =
              akka_2_4_12_shade.actor.mailbox.unbounded-control-aware-queue-based
            "akka_2_4_12_shade.dispatch.UnboundedControlAwareMessageQueueSemantics" =
              akka_2_4_12_shade.actor.mailbox.unbounded-control-aware-queue-based
            "akka_2_4_12_shade.dispatch.BoundedControlAwareMessageQueueSemantics" =
              akka_2_4_12_shade.actor.mailbox.bounded-control-aware-queue-based
            "akka_2_4_12_shade.event.LoggerMessageQueueSemantics" =
              akka_2_4_12_shade.actor.mailbox.logger-queue
          }
          unbounded-queue-based {
            mailbox-type = "akka_2_4_12_shade.dispatch.UnboundedMailbox"
          }
          bounded-queue-based {
            mailbox-type = "akka_2_4_12_shade.dispatch.BoundedMailbox"
          }
          unbounded-deque-based {
            mailbox-type = "akka_2_4_12_shade.dispatch.UnboundedDequeBasedMailbox"
          }
          bounded-deque-based {
            mailbox-type = "akka_2_4_12_shade.dispatch.BoundedDequeBasedMailbox"
          }
          unbounded-control-aware-queue-based {
            mailbox-type = "akka_2_4_12_shade.dispatch.UnboundedControlAwareMailbox"
          }
          bounded-control-aware-queue-based {
            mailbox-type = "akka_2_4_12_shade.dispatch.BoundedControlAwareMailbox"
          }
          logger-queue {
            mailbox-type = "akka_2_4_12_shade.event.LoggerMailboxType"
          }
        }
        debug {
          receive = off
          autoreceive = off
          lifecycle = off
          fsm = off
          event-stream = off
          unhandled = off
          router-misconfiguration = off
        }

        # We wish to use custom serializers for performance. These might not be portable accross different JVMs.
        # If you have trouble with serialization deactivate the requestserializer and responseserializer and remove the
        # bindings below to always use the default JavaSerializer.
        serializers {
          java = "akka_2_4_12_shade.serialization.JavaSerializer"
          bytes = "akka_2_4_12_shade.serialization.ByteArraySerializer"
          requestserializer = "glint.serialization.RequestSerializer"
          responseserializer = "glint.serialization.ResponseSerializer"
        }

        # Serialization bindings to enable.
        serialization-bindings {
          "[B" = bytes
          "java.io.Serializable" = java
          "glint.messages.server.request.PullMatrix" = requestserializer
          "glint.messages.server.request.PullMatrixRows" = requestserializer
          "glint.messages.server.request.PullVector" = requestserializer
          "glint.messages.server.request.PushMatrixDouble" = requestserializer
          "glint.messages.server.request.PushMatrixFloat" = requestserializer
          "glint.messages.server.request.PushMatrixInt" = requestserializer
          "glint.messages.server.request.PushMatrixLong" = requestserializer
          "glint.messages.server.request.PushVectorDouble" = requestserializer
          "glint.messages.server.request.PushVectorFloat" = requestserializer
          "glint.messages.server.request.PushVectorInt" = requestserializer
          "glint.messages.server.request.PushVectorLong" = requestserializer
          "glint.messages.server.response.ResponseDouble" = responseserializer
          "glint.messages.server.response.ResponseRowsDouble" = responseserializer
          "glint.messages.server.response.ResponseFloat" = responseserializer
          "glint.messages.server.response.ResponseRowsFloat" = responseserializer
          "glint.messages.server.response.ResponseInt" = responseserializer
          "glint.messages.server.response.ResponseRowsInt" = responseserializer
          "glint.messages.server.response.ResponseLong" = responseserializer
          "glint.messages.server.response.ResponseRowsLong" = responseserializer
        }


        enable-additional-serialization-bindings = off
        additional-serialization-bindings {
        }
        warn-about-java-serializer-usage = on
        warn-on-no-serialization-verification = on
        serialization-identifiers {
          "akka_2_4_12_shade.serialization.JavaSerializer" = 1
          "akka_2_4_12_shade.serialization.ByteArraySerializer" = 4
        }
        dsl {
          inbox-size = 1000
          default-timeout = 5s
        }
      }

      scheduler {
        tick-duration = 10ms
        ticks-per-wheel = 512
        implementation = akka_2_4_12_shade.actor.LightArrayRevolverScheduler
        shutdown-timeout = 5s
      }

      io {
        pinned-dispatcher {
          type = "PinnedDispatcher"
          executor = "thread-pool-executor"
          thread-pool-executor.allow-core-timeout = off
        }

        tcp {
          nr-of-selectors = 1
          max-channels = 256000
          selector-association-retries = 10
          batch-accept-limit = 10
          direct-buffer-size = 128 KiB
          direct-buffer-pool-limit = 1000
          register-timeout = 5s
          max-received-message-size = unlimited
          trace-logging = off
          selector-dispatcher = "akka_2_4_12_shade.io.pinned-dispatcher"
          worker-dispatcher = "akka_2_4_12_shade.actor.default-dispatcher"
          management-dispatcher = "akka_2_4_12_shade.actor.default-dispatcher"
          file-io-dispatcher = "akka_2_4_12_shade.actor.default-dispatcher"
          file-io-transferTo-limit = 512 KiB
          finish-connect-retries = 5
          windows-connection-abort-workaround-enabled = off
        }
        udp {
          nr-of-selectors = 1
          max-channels = 4096
          select-timeout = infinite
          selector-association-retries = 10
          receive-throughput = 3
          direct-buffer-size = 128 KiB
          direct-buffer-pool-limit = 1000
          trace-logging = off
          selector-dispatcher = "akka_2_4_12_shade.io.pinned-dispatcher"
          worker-dispatcher = "akka_2_4_12_shade.actor.default-dispatcher"
          management-dispatcher = "akka_2_4_12_shade.actor.default-dispatcher"
        }
        udp-connected {
          nr-of-selectors = 1
          max-channels = 4096
          select-timeout = infinite
          selector-association-retries = 10
          receive-throughput = 3
          direct-buffer-size = 128 KiB
          direct-buffer-pool-limit = 1000
          trace-logging = off
          selector-dispatcher = "akka_2_4_12_shade.io.pinned-dispatcher"
          worker-dispatcher = "akka_2_4_12_shade.actor.default-dispatcher"
          management-dispatcher = "akka_2_4_12_shade.actor.default-dispatcher"
        }
        dns {
          dispatcher = "akka_2_4_12_shade.actor.default-dispatcher"
          resolver = "inet-address"
          inet-address {
            provider-object = "akka_2_4_12_shade.io.InetAddressDnsProvider"
            positive-ttl = 30s
            negative-ttl = 10s
            cache-cleanup-interval = 120s
          }
        }
      }

    }
  }

}
